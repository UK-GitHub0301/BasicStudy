package chap_10;

public class _03_Lambda {
    public static void main(String[] args) {
        // 람다식 :  간결한 코드 뭉치
        // 1. 접근 제어자(public)이 필요 없습니다.
        // 2. 이름 명칭도 필요 없습니다.
        // 3. 그리고 람다식 내에 리턴타입이 있다고 했고 자동으로 설정이 되어 있기 때문에 void 도 필요 없습니다.
        // 4. 만약 반환 문장이 하나 일 경우 중괄로'{}'를 삭제해도 됩니다.
        // 5. 세미콜론(;)도 필요 없습니다.
        // 6. 전달값이 하나 일 경우 괄로'()' 도 삭제 가능 합니다.
        // 7. 만일 반환되는 값의 return이 있으면 중괄로'{}'는 삭제 할 수 없습니다.

        // 람다식
        // 람다 함수는 프로그래밍 언어에서 사용되는 개념으로 익명함수를 지칭하는 용어 입니다.
        // 현재 사용되고 있는 람다의 근간은 수하고가 기초 컴퓨터과학 분야에서의 람다 대수이다.
        // 람다 대수는 간단하게 말하면 수학에서 사용하는 함수를 보다 간결하게 표현하는 방법입니다.
        // 람다의 특징
        // 람다 대수는 이름을 가질 필요가 없습니다- 익명함수
        // 두 개 이상의 입력이 있는 함수는 최종적으로 1개의 입력만 받는 람다 대수로 단순화 될 수 있습니다.
        // 익명함수?
        // 익명함수란 말그대로 함수의 이름이 없는 함수 입니다. 익명함수들은 공통으로 일급 객체 라는 특징을 가지고 있습니다.
        // 이 일급 객체란 일반적으로 다들 객체들에 적용 가능한 연산 모두 지원하는 개체를 가르킵니다. 함수를 값으로 사용할 수도 있으며
        // 파라메터로 전달 및 변수에 대입 하기와 같은 연산들이 가능합니다.
        // 람다의 장단점
        // 장점
        // 1. 코드의 간결성 - 람다를 사용하면 불필요한 반복문의 삭제가 가능하며 복잡한 식을 단순하게 표현할 수 있습니다.
        // 2. 지연연산 수행 - 람다는 지연연상을 수행 함으로써 불필요한 연산을 최소화 할 수 있습니다.
        // 3. 병렬처리 가능 - 멀티 쓰레디를 활용하여 병렬처리를 사용할 수 있습니다.
        // 단점
        // 1. 람다식의 호출이 까다롭습니다.
        // 2. 람다 stream 사용 시 단순 for 문 혹은 while 문 사용시 성능이 떨어집니다.
        // 3. 불필요하게 너무 사용하게 되면 오히려 가독성을 떨어 뜨릴 수 있습니다.
        // 람다의 표현식
        // 정상적인 유형
        // -----------------------------------------------
        // () -> {}, () ->1, () -> {return 1;}
        // (int x) -> x+1 => (x) -> x+1 or x->x+1
        // (int x) ->{ return x+1 }; => x ->{ return x+1};
        //(int x , int y) =>(x, y) -> x + y or (x,y)->{return x+y};

        // (전달값1, 전달값2, ....) -> { 코드 }
        //(전달값1, 전달값2, 전달값3, .... ) -> { 코드 }
    }
    //Case#1
    // -----------------변경 전----------------------
//    public void print(){
//        String s = " test";
//        System.out.println(s);
//    }
    // -----------------변경 후----------------------

//     ()-> {
//        String s = " test";
//        System.out.println(s);
//    }

    //Case#2
    // -----------------변경 전----------------------
//    public void print(String s){
//        System.out.println(s);
//    }
    // -----------------변경 후----------------------
//      s -> System.out.println(s)

    //Case#3
    // -----------------변경 전----------------------
//    public int add (int x, int y){
//        return x + y;
//    }
    // -----------------변경 후----------------------
//    ( x, y){ return x + y; }
}
